generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model workgroups {
  id         Int         @id @default(autoincrement())
  name       String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt @default(now())

  employees employees[]
}

model employees {
  id           Int        @id @default(autoincrement())
  id_workgroup Int
  name       String
  last_name  String
  document   String    @db.VarChar(14) @unique
  birthday   DateTime? @db.Date
  phone1     String    @db.VarChar(14)
  phone2     String    @db.VarChar(14)
  address    String
  photo      String
  login      String
  email      String
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt @default(now())
  workgroup workgroups   @relation(fields: [id_workgroup], references: [id])


  @@index([id_workgroup], map: "employees_id_workgroup_fkey")
  tasks tasks[]
  logs logs[]
}

model plans {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Decimal  @db.Decimal(10, 2)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  reservations      reservations[]
}

model guests {
  id         Int       @id @default(autoincrement())
  name       String
  last_name  String
  document   String    @db.VarChar(14) @unique
  birthday   DateTime? @db.Date
  phone1     String    @db.VarChar(18)
  phone2     String    @db.VarChar(18)
  address    String
  photo      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt @default(now())

  consumptions guest_consumptions[]
  reservations reservations[]
}

model guest_consumptions {
  id         Int      @id @default(autoincrement())
  id_guest   Int
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  guest      guests   @relation(fields: [id_guest], references: [id])

  @@index([id_guest], map: "guest_consumptions_id_guest_fkey")
}

model bedrooms {
  id                Int                   @id @default(autoincrement())
  number            Int
  bathroom_quantity Int
  bed_quantity      Int
  tv_quantity       Int
  category          bedrooms_category     @default(Solteiro)
  classification    BedroomClassification @default(Standard)
  privileges        String?
  short_description String                @db.VarChar(150)
  status            bedrooms_status       @default(Livre)
  photo             String?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  reservations      reservations[]
}

model reservations {
  id                  Int               @id @default(autoincrement())
  id_plan             Int
  id_guest            Int
  id_bedroom          Int
  check_in            DateTime
  check_out           DateTime
  status_checkin      CheckStatus @default(Pendente)
  status_checkout     CheckStatus @default(Pendente)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  antecipated_payment Boolean?
  plan                plans             @relation(fields: [id_plan], references: [id])
  bedroom             bedrooms          @relation(fields: [id_bedroom], references: [id])
  guest               guests            @relation(fields: [id_guest], references: [id])
  tasks               tasks[]

  @@index([id_plan], map: "reservations_id_plan_fkey")
  @@index([id_bedroom], map: "reservations_id_bedroom_fkey")
  @@index([id_guest], map: "reservations_id_guest_fkey")
}

model tasks {
  id             Int          @id @default(autoincrement())
  id_employee    Int
  id_reservation Int
  priority       TaskPriority @default(Baixa)
  description    String
  price          Decimal      @db.Decimal(10, 2)
  status         TaskStatus   @default(Pendente)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  employee       employees    @relation(fields: [id_employee], references: [id])
  reservation    reservations @relation(fields: [id_reservation], references: [id])

  @@index([id_employee], map: "tasks_id_employee_fkey")
  @@index([id_reservation], map: "tasks_id_reservation_fkey")
}

model logs {
  id          Int       @id @default(autoincrement())
  id_employee Int
  error_code  String    @db.VarChar(10)
  message     String
  ip          String    @db.VarChar(12)
  created_at  DateTime  @default(now())
  employee    employees @relation(fields: [id_employee], references: [id])

  @@index([id_employee], map: "logs_id_employee_fkey")
}

enum BedroomClassification {
  Standard
  Master
  Deluxe
}

enum CheckStatus {
  Pendente
  Realizado  
}

enum TaskPriority {
  Baixa
  Normal
  Alta
  Urgente
}

enum TaskStatus {
  Pendente
  Em_andamento
  Finalizado
}

enum bedrooms_category {
  Solteiro
  Duplo_solteiro
  Quarto_casal
  Dormitório
  Apartamento
}

enum bedrooms_status {
  Livre
  Ocupado
  Manutenção
}
